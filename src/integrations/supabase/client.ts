
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yekarqanirdkdckimpna.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlla2FycWFuaXJka2Rja2ltcG5hIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNzUwOTQsImV4cCI6MjA1OTg1MTA5NH0.WQlbyilIuH_Vz_Oit-M5MZ9II9oqO7tg-ThkZ5GCtfc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Checks if a storage bucket exists.
 * Note: This function does not attempt to create the bucket as this requires admin privileges.
 * The bucket should be created in the Supabase dashboard by an administrator.
 */
export const checkStorageBucket = async (bucketName: string): Promise<boolean> => {
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error(`Error checking storage buckets:`, error);
      return false;
    }
    
    const bucketExists = buckets?.some(bucket => bucket.name === bucketName);
    
    if (!bucketExists) {
      console.warn(`Storage bucket "${bucketName}" not found. Please create it in your Supabase project dashboard.`);
    }
    
    return bucketExists;
  } catch (error) {
    console.error(`Error checking for bucket "${bucketName}":`, error);
    return false;
  }
};

// Initialize study documents storage bucket check on load
checkStorageBucket('studystoragenew')
  .then(exists => {
    if (exists) {
      console.log('Storage bucket for study documents confirmed.');
    }
  });
